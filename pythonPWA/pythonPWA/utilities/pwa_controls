#! /usr/bin/python
import Tkinter as tk
import numpy, os

class Control(object):
    
    def __init__(self,
                 instDir = None,
                 reactMode = 24,
                 BeamPole = 0.4,
                 LoMass = 1000,
                 UpMass = 2500,
                 RaMass = 20,
                 NumSet = 20,
                 MigNcal = 1000):
    
        self.instDirL = instDir
        self.reactModeL = reactMode
        self.BeamPoleL = BeamPole
        self.UpMassL = UpMass
        self.LoMassL = LoMass
        self.RaMassL = RaMass
        self.NumSetL = NumSet
        self.MigNcalL = MigNcal

    def instDir(self):
        iD = ent0.get()
        self.instDirL = iD

    def reactMode(self):
        rM = ent1.get()
        self.reactModeL = rM        

    def BeamPole(self):
        Bp = ent2.get()
        self.BeamPoleL = Bp
    
    def UpMass(self):
        Um = ent3.get()
        self.UpMassL = Um

    def LoMass(self):
        Lm = ent4.get()
        self.LoMassL = Lm

    def RaMass(self):
        Rm = ent5.get()
        self.RaMassL = Rm

    def NumSet(self):
        Ns = ent6.get()
        self.NumSetL = Ns

    def MigNcal(self):
        MnC = ent7.get()
        self.MigNcalL = MnC

    def run(self):
        self.instDir()
        self.reactMode()
        self.BeamPole()
        self.LoMass()
        self.UpMass()
        self.RaMass()
        self.NumSet()
        self.MigNcal()  
    
    def load(self,Con):
        self.instDirL = Con[0]
        self.reactModeL = Con[1]
        self.BeamPoleL = Con[2]
        self.LoMassL = Con[3]
        self.UpMassL = Con[4]
        self.RaMassL = Con[5]
        self.NumSetL = Con[6]
        self.MigNcalL = Con[7]
        
        ent0.insert("end",Con[0])
        ent1.insert("end",Con[1])
        ent2.insert("end",Con[2])
        ent3.insert("end",Con[3])
        ent4.insert("end",Con[4])
        ent5.insert("end",Con[5])
        ent6.insert("end",Con[6])
        ent7.insert("end",Con[7])

    def save(self):
        self.run()
        Con = [self.instDirL,
                int(self.reactModeL),
                float(self.BeamPoleL),
                int(self.LoMassL),       
                int(self.UpMassL),   
                int(self.RaMassL),   
                int(self.NumSetL),
                int(self.MigNcalL)]
        numpy.save(os.getcwd()+"/Control_List.npy",Con)
        root.destroy()

Lst = ['Full path to the directory '+'\n'+'the pythonPWA toolkit is installed',
                'Reaction Mode ',
                'Beam Polorization ',
                'Lower Mass ',
                'Upper Mass ',
                'Mass Range ',
                'Number of Sets ',
                'Max Number of Migrad Calls ']

Contr = Control()

root = tk.Tk()
root.wm_title("PWA CONTROLS")

frame=tk.Frame(root)
frame.grid(row=0,column=0,sticky="N"+"S"+"E"+"W")

L0=tk.Label(frame,text=Lst[0])
L0.pack(side="top")

ent0=tk.Entry(frame, width=30, font=55)
ent0.pack(side="top")

L1=tk.Label(frame,text=Lst[1])
L1.pack(side="top")

ent1=tk.Entry(frame, width=30, font=55)
ent1.pack(side="top")

L2=tk.Label(frame,text=Lst[2])
L2.pack(side="top")

ent2=tk.Entry(frame, width=30, font=55)
ent2.pack(side="top")

L3=tk.Label(frame,text=Lst[3])
L3.pack(side="top")

ent3=tk.Entry(frame, width=30, font=55)
ent3.pack(side="top")

L4=tk.Label(frame,text=Lst[4])
L4.pack(side="top")

ent4=tk.Entry(frame, width=30, font=55)
ent4.pack(side="top")

L5=tk.Label(frame,text=Lst[5])
L5.pack(side="top")

ent5=tk.Entry(frame, width=30, font=55)
ent5.pack(side="top")

L6=tk.Label(frame,text=Lst[6])
L6.pack(side="top")

ent6=tk.Entry(frame, width=30, font=55)
ent6.pack(side="top")

L7=tk.Label(frame,text=Lst[7])
L7.pack(side="top")

ent7=tk.Entry(frame, width=30, font=55)
ent7.pack(side="top")

btn=tk.Button(frame, text="SAVE", command= lambda: Contr.save())
btn.pack(side="bottom")

if os.path.isfile(os.getcwd()+"/Control_List.npy"):
    Con = numpy.load(os.getcwd()+"/Control_List.npy")
    Contr.load(Con)

root.mainloop()



