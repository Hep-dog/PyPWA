#! /u/apps/anaconda/anaconda-2.0.1/bin/python2 
"""
.. module:: batchFarmServices
   :platform: Unix, Windows, OSX
   :synopsis: Utilities for doing PWA with the Jlab batch system.

.. moduleauthor:: Joshua Pond <jpond@jlab.org>


""" 
import os
import time
import subprocess

import numpy

indir = os.getcwd().strip("GUI")
Control = numpy.load(os.path.join(indir,"GUI","Control_List.npy"))
scriptOutDir=os.path.join(indir,"scripts","submitions")


def submit(jlab_submission_file):
    """
    This function calls the JLab jsub command for a specific jsub .txt
    file created by this program.

    Args:
        jlab_submission_file (string): The file name for the jsub file.
    """
    cmd = 'jsub ' + jlab_submission_file
    subprocess.Popen(
        cmd,
        shell=True,
        executable=os.environ.get('SHELL', '/bin/tcsh'),
        env=os.environ
    )
    time.sleep(.5)


def gen(directory, cmd):
    """
    This function creates the jsub .txt file to be submitted to the JLab
    batch farm.

    Args:
        directory (string): The file name for the jsub file.
        cmd (string): The full command to be used in the jsub file.

    Returns:
        string: name of the jsub file created by this function.
    """
    auger_opts = {
        "project": Control[9],
        "track": 'analysis',
        "jobname":  'WalkNTrue',
        "os": 'centos65',
        "time":  30,
        "cmd": cmd
    }

    jsub_filename = os.path.join(scriptOutDir,directory)
    jsub_file = open(jsub_filename,'w')
    jsub_file.write('''\
PROJECT:{project}
TRACK:{track}
JOBNAME:{jobname}
OS:{os}
TIME:{time}
COMMAND:{cmd}
'''.format(**auger_opts))
    jsub_file.close()
    return jsub_filename


def parse_dir(mass_bin):
    """
    This function creates the cmd string to be submitted to the JLab
    batch farm.

    Args:
    mass_bin (int): The int value for the mass in MeV for the mass
        mass_bin.
    
    Returns:
    cmd (string): The full command to be used in the jsub file.
    """

    cmd = os.path.join(
        indir, "scripts" , "walkingNTrue.py"
    ) + " " + str(mass_bin) + " " + indir

    return cmd

if __name__ == '__main__':
    top = int(Control[2])    
    bot = int(Control[3])
    ran = int(Control[4])
    for i in range(top,bot+ran,ran):
        print( "Processing bin",i)
        submit(gen(str(i) +"_MeV", parse_dir(i)))
